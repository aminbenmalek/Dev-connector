{"ast":null,"code":"import { post } from 'request';\nimport { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, REMOVE_COMMENT, UPADATE_LIKES } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPADATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.postId ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Amin/Desktop/react/dev-connection-demo/client/src/reducers/post.js"],"names":["post","ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","REMOVE_COMMENT","UPADATE_LIKES","initialState","posts","loading","error","state","action","type","payload","map","_id","postId","likes","filter","comments","comment"],"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;AACA,SAAQC,WAAR,EAAqBC,QAArB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsDC,SAAtD,EAAgEC,UAAhE,EAA4EC,cAA5E,EAA4FC,aAA5F,QAAgH,kBAAhH;AAGA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfV,EAAAA,IAAI,EAAC,IAFU;AAGfW,EAAAA,OAAO,EAAC,IAHO;AAIfC,EAAAA,KAAK,EAAC;AAJS,CAAnB;AAMA,eAAe,YAAmC;AAAA,MAA1BC,KAA0B,uEAApBJ,YAAoB;AAAA,MAAPK,MAAO;AAC9C,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAeF,MAArB;;AACA,UAAOC,IAAP;AACI,SAAKV,SAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFH,QAAAA,KAAK,EAACM,OAFJ;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKL,UAAL;AACQ,aAAM,EACF,GAAGO,KADD;AAEFD,QAAAA,KAAK,EAACI,OAFJ;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKR,SAAKH,aAAL;AACI,aAAM,EACF,GAAGK,KADD;AAEFH,QAAAA,KAAK,EAACG,KAAK,CAACH,KAAN,CAAYO,GAAZ,CAAgBjB,IAAI,IAAEA,IAAI,CAACkB,GAAL,KAAWF,OAAO,CAACG,MAAnB,GAA4B,EAAC,GAAGnB,IAAJ;AAASoB,UAAAA,KAAK,EAACJ,OAAO,CAACI;AAAvB,SAA5B,GAA4DpB,IAAlF,CAFJ;AAGFW,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKR,WAAL;AACI,aAAM,EACF,GAAGU,KADD;AAEFH,QAAAA,KAAK,EAACG,KAAK,CAACH,KAAN,CAAYW,MAAZ,CAAmBrB,IAAI,IAAEA,IAAI,CAACkB,GAAL,KAAaF,OAAtC,CAFJ;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKT,QAAL;AACI,aAAM,EACF,GAAGW,KADD;AAEFH,QAAAA,KAAK,EAAC,CAACM,OAAD,EAAS,GAAGH,KAAK,CAACH,KAAlB,CAFJ;AAGFC,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKP,QAAL;AACI,aAAM,EACF,GAAGS,KADD;AAEFb,QAAAA,IAAI,EAACgB,OAFH;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKV,WAAL;AACI,aAAM,EACF,GAAGY,KADD;AAEFb,QAAAA,IAAI,EAAC,EAAC,GAAGa,KAAK,CAACb,IAAV;AAAesB,UAAAA,QAAQ,EAACN;AAAxB,SAFH;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKJ,cAAL;AACI,aAAM,EACF,GAAGM,KADD;AAEFb,QAAAA,IAAI,EAAC,EAAC,GAAGa,KAAK,CAACb,IAAV;AAAesB,UAAAA,QAAQ,EAACT,KAAK,CAACb,IAAN,CAAWsB,QAAX,CAAoBD,MAApB,CAA2BE,OAAO,IAAEA,OAAO,CAACL,GAAR,KAAgBF,OAApD;AAAxB,SAFH;AAGFL,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ;AACI,aAAOE,KAAP;AAlDR;AAoDH","sourcesContent":["import { post } from 'request'\r\nimport {ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS,POST_ERROR, REMOVE_COMMENT, UPADATE_LIKES} from '../actions/types'\r\n\r\n\r\nconst initialState={\r\n    posts:[],\r\n    post:null,\r\n    loading:true,\r\n    error:{}\r\n}\r\nexport default function(state=initialState,action){\r\n    const {type,payload}=action\r\n    switch(type){\r\n        case GET_POSTS:\r\n            return{\r\n                ...state,\r\n                posts:payload,\r\n                loading:false\r\n            }\r\n        case POST_ERROR:\r\n                return{\r\n                    ...state,\r\n                    error:payload,\r\n                    loading:false\r\n                }\r\n        case UPADATE_LIKES:\r\n            return{\r\n                ...state,\r\n                posts:state.posts.map(post=>post._id===payload.postId ? {...post,likes:payload.likes} : post),\r\n                loading:false\r\n            }\r\n        case DELETE_POST:\r\n            return{\r\n                ...state,\r\n                posts:state.posts.filter(post=>post._id !== payload),\r\n                loading:false\r\n            }\r\n        case ADD_POST:\r\n            return{\r\n                ...state,\r\n                posts:[payload,...state.posts],\r\n                loading:false\r\n            }\r\n        case GET_POST:\r\n            return{\r\n                ...state,\r\n                post:payload,\r\n                loading:false\r\n            }\r\n        case ADD_COMMENT:\r\n            return{\r\n                ...state,\r\n                post:{...state.post,comments:payload},\r\n                loading:false\r\n            }\r\n        case REMOVE_COMMENT:\r\n            return{\r\n                ...state,\r\n                post:{...state.post,comments:state.post.comments.filter(comment=>comment._id !== payload)},\r\n                loading:false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}