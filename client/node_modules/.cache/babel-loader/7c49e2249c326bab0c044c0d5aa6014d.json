{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAILED, LOAD_USER, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILED, LOGOUT, CLEAR_PROFILE } from '../actions/types';\nimport { setAlert } from './alert';\nimport Axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await Axios.get('/api/auth');\n    dispatch({\n      type: LOAD_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await Axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAILED\n      });\n    }\n  };\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await Axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILED\n    });\n  }\n}; //Logout User/Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Amin/Desktop/react/dev-connection-demo/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAILED","LOAD_USER","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILED","LOGOUT","CLEAR_PROFILE","setAlert","Axios","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import {REGISTER_SUCCESS,REGISTER_FAILED,LOAD_USER,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAILED, LOGOUT,CLEAR_PROFILE} from '../actions/types'\r\nimport {setAlert} from './alert'\r\nimport Axios from 'axios'\r\nimport setAuthToken from '../utils/setAuthToken'\r\n//Load User\r\nexport const loadUser=()=>async dispatch=>{\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token)\r\n    }\r\n    try {\r\n        const res=await Axios.get('/api/auth')\r\n        dispatch({type:LOAD_USER,payload:res.data})\r\n    } catch (err) {\r\n        dispatch({type:AUTH_ERROR})\r\n    }\r\n}\r\n//Register User\r\nexport const register=({name,email,password})=>async dispatch=>{\r\n    const config={\r\n        headers:{\r\n            'content-type':'application/json'\r\n        }\r\n    }\r\n    const body=JSON.stringify({name,email,password})\r\n    try {\r\n        const res=await Axios.post('/api/users',body,config)\r\n        dispatch({type:REGISTER_SUCCESS,payload:res.data})\r\n        dispatch(loadUser())\r\n    } catch (err) {\r\n        const errors =err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error=>dispatch(setAlert(error.msg,'danger')))\r\n        }\r\n        dispatch({type:REGISTER_FAILED})\r\n    }\r\n    \r\n}\r\n//Login User\r\nexport const login=(email,password)=>async dispatch=>{\r\n    const config={\r\n        headers:{\r\n            'content-type':'application/json'\r\n        }\r\n    }\r\n    const body=JSON.stringify({email,password})\r\n    try {\r\n        const res=await Axios.post('/api/auth',body,config)\r\n        dispatch({type:LOGIN_SUCCESS,payload:res.data})\r\n        dispatch(loadUser())\r\n    } catch (err) {\r\n        const errors =err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error=>dispatch(setAlert(error.msg,'danger')))\r\n        }\r\n        dispatch({type:LOGIN_FAILED})\r\n    }\r\n    \r\n}\r\n//Logout User/Clear Profile\r\nexport const logout=()=>dispatch=>{\r\n    dispatch({type:CLEAR_PROFILE})\r\n    dispatch({type:LOGOUT})}\r\n    \r\n"]},"metadata":{},"sourceType":"module"}