{"ast":null,"code":"import { ADD_POST, DELETE_POST, GET_POSTS, POST_ERROR, UPADATE_LIKES, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types';\nimport Axios from 'axios';\nimport { setAlert } from './alert'; //Get Posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await Axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add a Like \n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await Axios.put(`/api/posts/likes/${postId}`);\n    dispatch({\n      type: UPADATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Remove a Like \n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await Axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPADATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Remove a Post \n\nexport const removePost = postId => async dispatch => {\n  try {\n    const res = await Axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add Post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    const res = await Axios.post('/api/posts', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get Post\n\nexport const getPost = postId => async dispatch => {\n  try {\n    const res = await Axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add Comment\n\nexport const addComment = (formData, postId) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    const res = await Axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Delete Comment \n\nexport const removeComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await Axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Amin/Desktop/react/dev-connection-demo/client/src/actions/post.js"],"names":["ADD_POST","DELETE_POST","GET_POSTS","POST_ERROR","UPADATE_LIKES","GET_POST","ADD_COMMENT","REMOVE_COMMENT","Axios","setAlert","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postId","put","likes","removeLike","removePost","delete","addPost","formData","config","headers","post","getPost","addComment","removeComment","commentId"],"mappings":"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","sourcesContent":["import {ADD_POST, DELETE_POST, GET_POSTS,POST_ERROR,UPADATE_LIKES,GET_POST,ADD_COMMENT,REMOVE_COMMENT} from './types'\r\nimport Axios from 'axios'\r\nimport {setAlert} from './alert'\r\n\r\n//Get Posts\r\nexport const getPosts=()=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.get('/api/posts')\r\n        dispatch({type:GET_POSTS,payload:res.data})\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Add a Like \r\nexport const addLike=(postId)=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.put(`/api/posts/likes/${postId}`)\r\n        dispatch({type:UPADATE_LIKES,payload:{postId,likes:res.data}})\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Remove a Like \r\nexport const removeLike=(postId)=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.put(`/api/posts/unlike/${postId}`)\r\n        dispatch({type:UPADATE_LIKES,payload:{postId,likes:res.data}})\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Remove a Post \r\nexport const removePost=(postId)=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.delete(`/api/posts/${postId}`)\r\n        dispatch({type:DELETE_POST,payload:postId})\r\n        dispatch(setAlert('Post Removed','success'))\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Add Post\r\nexport const addPost=(formData)=>async dispatch=>{\r\n    try {\r\n        const config={\r\n            headers:{\r\n                'content-type':'application/json'\r\n            }       \r\n        }\r\n        const res=await Axios.post('/api/posts',formData,config)\r\n        dispatch({type:ADD_POST,payload:res.data})\r\n        dispatch(setAlert('Post Created','success'))\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Get Post\r\nexport const getPost=(postId)=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.get(`/api/posts/${postId}`)\r\n        dispatch({type:GET_POST,payload:res.data})\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Add Comment\r\nexport const addComment=(formData,postId)=>async dispatch=>{\r\n    try {\r\n        const config={\r\n            headers:{\r\n                'content-type':'application/json'\r\n            }       \r\n        }\r\n        const res=await Axios.post(`/api/posts/comment/${postId}`,formData,config)\r\n        dispatch({type:ADD_COMMENT,payload:res.data})\r\n        dispatch(setAlert('Comment Added','success'))\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}\r\n//Delete Comment \r\nexport const removeComment=(postId,commentId)=>async dispatch=>{\r\n    try {\r\n        const res=await Axios.delete(`/api/posts/comment/${postId}/${commentId}`)\r\n        dispatch({type:REMOVE_COMMENT,payload:commentId})\r\n        dispatch(setAlert('Comment Removed','success'))\r\n    } catch (err) {\r\n        dispatch({type:POST_ERROR,payload:{msg:err.response.statusText,status:err.response.status}})\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}